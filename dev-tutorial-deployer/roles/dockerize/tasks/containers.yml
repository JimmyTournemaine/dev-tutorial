---
- name: Create the containers network
  docker_network:
    name: "dev-tutorial-network"
  tags:
    - build
    - api
    - app

- name: Create the database container
  docker_container:
    name: "dev-tutorial-mongo-{{ deployer_env }}"
    image: mongo
    state: "{{ dockerize_containers_state }}"
    restart: "{{ dockerize_containers_state == 'started' and dockerize_force }}"
    auto_remove: "{{ dockerize_containers_autoremove }}"
    log_driver: none
    networks:
      - name: "dev-tutorial-network"
    networks_cli_compatible: no
  register: db_cont_metadata
  tags:
    - build
    - api

- name: Create the backend container
  docker_container:
    name: "dev-tutorial-api"
    image: "dev-tutorial-api"
    state: "{{ dockerize_containers_state }}"
    restart: "{{ True in restart_conditions }}"
    auto_remove: "{{ dockerize_containers_autoremove }}"
    command: "{{ dockerize_backend_command }}"
    tty: yes
    volumes: "{{ volumes }}"
    ports:
      - "{{ dockerize_api_port }}:{{ dockerize_api_port }}"
      - "{{ dockerize_api_socket_port }}:{{ dockerize_api_socket_port }}"
    networks:
      - name: "dev-tutorial-network"
    networks_cli_compatible: no
    env: "{{ dockerize_container_env_backend }}"
  vars:
    restart_conditions:
      - "{{ dockerize_containers_state == 'restarted' }}"
      - "{{ dockerize_force_api_container | bool }}"
      - "{{ backend_env is changed }}"
    default_volumes:
      - "{{ deployer_hosted_workspace }}/dev-tutorial-api:/usr/src/app/api"
      - "/usr/src/app/api/node_modules"
    linux_volumes: "{{ default_volumes + ['/var/run/docker.sock:/var/run/docker.sock'] }}"
    volumes: "{{ linux_volumes if 'linux' == deployer_host_system else default_volumes }}"
  register: backend_cont_metadata
  tags:
    - build
    - api

- name: Create the frontend container
  docker_container:
    name: "dev-tutorial-app"
    image: "dev-tutorial-app"
    state: "{{ dockerize_containers_state }}"
    restart: "{{ True in restart_conditions }}"
    auto_remove: "{{ dockerize_containers_autoremove }}"
    command: "{{ dockerize_frontend_command | default(omit) }}"
    tty: yes
    volumes:
      - "{{ deployer_hosted_workspace }}/dev-tutorial-app:/usr/src/app/app-ui"
      - "/usr/src/app/app-ui/node_modules"
    ports:
      - "{{ dockerize_app_port }}:{{ dockerize_app_port }}"
      - "{{ dockerize_app_karma_port }}:{{ dockerize_app_karma_port }}"
    networks:
      - name: "dev-tutorial-network"
    networks_cli_compatible: no
  vars:
    restart_conditions:
      - "{{ dockerize_containers_state == 'started' }}"
      - "{{ dockerize_force_app_container | bool }}"
      - "{{ frontend_env is changed }}"
      - "{{ frontend_proxy is changed }}"
  register: frontend_cont_metadata
  tags:
    - build
    - app
