---
# Setup the docker host configuration

- name: Get the docker host setup if not set (linux)
  set_fact:
    run_api_docker: { socketPath: "/var/run/docker.sock" }
  when:
    - "run_api_docker is not defined"
    - "'linux' == deployer_host_system"

- name: Get the docker host setup if not set (non-linux)
  set_fact:
    run_api_docker: { host: "host.docker.internal", port: 2375 }
  when:
    - "run_api_docker is not defined"
    - "'linux' != deployer_host_system"

# Run the database

- name: Pull the database image
  docker_image:
    name: "{{ run_api_db_image }}"
    source: pull

- name: Run the database container
  docker_container:
    name: "{{ run_api_db_container }}"
    image: mongo
    state: started
    auto_remove: yes
    log_driver: none
    networks:
      - name: "{{ run_api_network_db }}"
    networks_cli_compatible: no

# Run the Dev'Tutorial API

- name: Generate the environment setup
  template:
    src: environment.ts.j2
    dest: "{{ deployer_local_workspace }}/dev-tutorial-api/src/environments/environment.ts"
    mode: 0644
  tags: prepare

- name: Run the backend container
  docker_container:
    name: "{{ run_api_container }}"
    image: "{{ run_api_image }}"
    state: started
    auto_remove: yes
    command: "{{ run_api_command | mandatory }}"
    tty: yes
    volumes: "{{ volumes }}"
    ports:
      - "{{ run_api_port }}:{{ run_api_port }}"
      - "{{ run_api_socket_port }}:{{ run_api_socket_port }}"
    networks:
      - name: "{{ run_api_network_db }}"
      - name: "{{ run_api_network_api }}"
    networks_cli_compatible: no
    env: "{{ run_api_env }}"
  vars:
    default_volumes:
      - "{{ deployer_hosted_workspace }}/dev-tutorial-api:/usr/src/app/api"
      - "/usr/src/app/api/node_modules"
    linux_volumes: "{{ default_volumes + ['/var/run/docker.sock:/var/run/docker.sock'] }}"
    volumes: "{{ linux_volumes if 'linux' == deployer_host_system else default_volumes }}"
