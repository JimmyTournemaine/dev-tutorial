---
- name: Filter generators
  set_fact:
    docsgen_generators: "{{ docsgen_generators | selectattr('name', 'in', generators) }}"
  when: generators is defined

- name: Check generation tools
  command: yarn global list
  register: yarn_global_list
  changed_when: False

- name: Install generation tools
  yarn:
    global: yes
    name: "{{ item.name }}"
    version: "{{ item.version | default(omit) }}"
  when: "fullname not in yarn_global_list.stdout"
  vars:
    fullname: "{{ item.name + (('@' + item.version|string) if item.version is defined else '') }}"
  loop_control:
    label: "{{ fullname }}"
  loop: "{{ docsgen_generators | map(attribute='dependencies') | flatten | unique }}"

- name: Ensure docs folder exists
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - docs
    - docs/html

- name: Copy the main HTML file
  copy:
    src: index.html
    dest: docs/html/index.html

- name: Ensure dependencies are installed
  yarn:
    path: "{{ item }}"
  register: yarn_deps
  changed_when: "'Already up-to-date' not in yarn_deps"
  loop:
    - dev-tutorial-api
    - dev-tutorial-app

- name: Prepare the warnings variable
  set_fact:
    docsgen_warnings: []

- name: Run documentation generators
  include_tasks: "generators/{{ genitem.name }}.yml"
  loop: "{{ docsgen_generators }}"
  loop_control:
    loop_var: genitem
    label: "{{ genitem.name }}"
  vars:
    task_item: "{{ genitem.task_item | default(omit) }}"

- name: Some generators cannot proceed
  debug:
    var: docsgen_warnings
  when: "docsgen_warnings | length > 0"
  failed_when: True
