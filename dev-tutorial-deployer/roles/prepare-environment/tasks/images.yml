---

# Pull standard images

- name: Pull the database image
  docker_image:
    name: mongo
    source: pull
  tags:
    - build

# Generate Dockerfiles
- name: Generate .dockerignore
  copy:
    dest: "{{ item }}"
    content: |
      # {{ ansible_managed }}
      dist
      node_modules
      .editorconfig
      yarn-error.log
  loop:
    - "{{ deployer_local_workspace }}/dev-tutorial-api/.dockerignore"
    - "{{ deployer_local_workspace }}/dev-tutorial-app/.dockerignore"


- name: Generate the backend Dockerfile
  template:
    src: "{{ item }}"
    dest: "{{ deployer_local_workspace }}/dev-tutorial-api/Dockerfile"
  with_first_found:
    - dockerfiles/Dockerfile.{{ inventory_hostname }}.api.j2
    - dockerfiles/Dockerfile.base.api.j2
  tags:
    - build
    - api

- name: Generate the frontend Dockerfile
  template:
    src: "{{ item }}"
    dest: "{{ deployer_local_workspace }}/dev-tutorial-app/Dockerfile"
  with_first_found:
    - dockerfiles/Dockerfile.{{ inventory_hostname }}.app.j2
    - dockerfiles/Dockerfile.base.app.j2
  tags:
    - build
    - app

# Build images from generated Dockerfiles

- name: Build the backend image
  docker_image:
    name: "dev-tutorial-api-{{ inventory_hostname }}"
    build:
      path: "{{ deployer_local_workspace }}/dev-tutorial-api"
      pull: "{{ prepare_env_force_api }}"
      rm: yes
      nocache: "{{ prepare_env_force_api }}"
    state: present
    source: build
    force_source: "{{ prepare_env_force_api }}"
  tags:
    - build
    - api

- name: Build the frontend image
  docker_image:
    name: "dev-tutorial-app-{{ inventory_hostname }}"
    build:
      path: "{{ deployer_local_workspace }}/dev-tutorial-app"
      pull: "{{ prepare_env_force_app }}"
      rm: yes
      nocache: "{{ prepare_env_force_app }}"
    state: present
    source: build
    force_source: "{{ prepare_env_force_app }}"
  tags:
    - build
    - app

- name: Find the tutorials directories
  find:
    paths: "{{ deployer_local_workspace }}/dev-tutorial-api/tutorials"
    recurse: no
    file_type: directory
  register: tutorial_directories
  tags:
    - build
    - tutorials

- name: Build the tutorials images
  docker_image:
    name: "{{ item | basename }}"
    build:
      path: "{{ item | dirname }}"
      pull: "{{ prepare_env_force }}"
      rm: yes
      nocache: "{{ prepare_env_force }}"
    state: present
    source: build
    force_source: "{{ prepare_env_force }}"
  loop: "{{ tutorial_directories.files | map(attribute='path') | list }}"
  loop_control:
    label: "{{ item | basename }}"
  tags:
    - build
    - tutorials
